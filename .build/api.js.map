{
  "version": 3,
  "sources": ["../api.ts"],
  "sourcesContent": ["import express from \"express\";\nconst fs = require('fs');\nimport type {Express, Request, Response} from \"express\";\n\nconst api = express.Router();\n\napi.use((req, res, next) => {\n  next();\n});\n\napi.get('/', (req, res) => {\n  res.send('GET: API root');\n});\n\nconst studentArray = JSON.parse(fs.readFileSync('./data/students.json'));\n\nconst eventArray = JSON.parse(fs.readFileSync('./data/events.json'));\n\napi.get('/students', (req, res) => {\n  const gradeLevel = req.query.gradeLevel;\n  if (!gradeLevel) {\n    res.send(studentArray);\n  }\n  const temp = [];\n  for (let i = 0; i < studentArray.length; i++) {\n    if (studentArray[i].gradeLevel === gradeLevel) {\n      temp.push(studentArray[i]);\n    }\n  }\n  res.send(temp);\n});\n\napi.get('/students/:id', (req, res) => {\n  const id = req.params.id;\n  for (let i = 0; i < studentArray.length; i++) {\n    if (studentArray[i].id === id) {\n      res.send(studentArray[i]).status(200);\n    }\n  }\n})\n\napi.post('/students', (req, res) => {\n  const firstName = req.query.firstName;\n  const lastName = req.query.lastName;\n  const gradeLevel = req.query.gradeLevel;\n  const id = generateStudentId();\n  const newStudent = {\n    id: id.toString(),\n    firstName: firstName,\n    lastName: lastName,\n    gradeLevel: gradeLevel,\n    points: 0,\n    events: []\n  }\n  studentArray.push(newStudent);\n  const newArray = JSON.stringify(studentArray);\n  fs.writeFileSync('./data/students.json', newArray);\n  res.status(201).send(newStudent);\n});\n\napi.post('/students/:studentId/events/:eventId', (req, res) => {\n  const studentId = req.params.studentId;\n  const eventId = req.params.eventId;\n  let studentIndex = 0;\n  let eventIndex = 0;\n  for (let i = 0; i < studentArray.length; i++) {\n    if (studentArray[i].id === studentId) {\n      studentIndex = i;\n    }\n  }\n  for (let i = 0; i < eventArray.length; i++) {\n    if (eventArray[i].id === eventId) {\n      eventIndex = i;\n    }\n  }\n  studentArray[studentIndex].events.push(eventId);\n  studentArray[studentIndex].points = Number(studentArray[studentIndex].points) + Number(eventArray[eventIndex].points);\n  const newArray = JSON.stringify(studentArray);\n  fs.writeFileSync('./data/students.json', newArray);\n  res.status(201).send(studentArray[studentIndex].events);\n});\n\napi.get('/events', (req, res) => {\n  res.status(200).send(eventArray);\n});\n\napi.post('/events', (req, res) => {\n  const name = req.query.name;\n  const points = req.query.points;\n  const id = generateEventId();\n  const newEvent = {\n    id: id,\n    name: name,\n    points: points\n  }\n  eventArray.push(newEvent);\n  const newArray = JSON.stringify(eventArray);\n  fs.writeFileSync('./data/events.json', newArray);\n  res.status(201).send(newEvent);\n});\n\nfunction generateStudentId() {\n  let counter = 0;\n  for (let i = 0; i < studentArray.length; i++) {\n    if (studentArray[i].id * 1 === counter) {\n      counter++;\n      i = -1;\n    }\n  }\n  return counter;\n}\n\nfunction generateEventId() {\n  let counter = 0;\n  for (let i = 0; i < eventArray.length; i++) {\n    if (studentArray[i].id * 1 === counter) {\n      counter++;\n      i = -1;\n    }\n  }\n  return counter;\n}\n\nmodule.exports = api;"],
  "mappings": "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",
  "names": ["express"]
}
